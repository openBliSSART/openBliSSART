cmake_minimum_required(VERSION 3.22)

# set the project name and version
project(openBliSSART VERSION 1.0)

configure_file(openBliSSARTconfig.h.in openBliSSARTconfig.h)

# specify the C++ standard
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED True)

# Option to Enable NO_CUDA
option( NO_CUDA "Enable NO_CUDA" OFF )

# The lines below will generate the config.h based on the options above
# The file will be in the ${CMAKE_BINARY_DIR} location
set(CONFIG_H ${CMAKE_BINARY_DIR}/config.h)
string(TIMESTAMP CURRENT_TIMESTAMP)
file(WRITE ${CONFIG_H} "/* WARNING: This file is auto-generated by CMake on ${CURRENT_TIMESTAMP}. DO NOT EDIT!!! */\n\n")
if( NO_CUDA )
    message(" NO_CUDA Enabled")
    file(APPEND ${CONFIG_H} "/* Enable NO_CUDA */\n")
    file(APPEND ${CONFIG_H} "#define [HAVE_CUDA] \n\n")
endif( NO_CUDA )
#findCUDA()
find_package(CUDAToolkit 11.6 REQUIRED)
#find_package(CUDA 11.6 REQUIRED)
message(STATUS "Found CUDA ${CUDA_VERSION_STRING} at ${CUDA_TOOLKIT_ROOT_DIR}")
#cmake -D CUDA_TOOLKIT_ROOT_DIR=/usr/local/cuda-5.5 ..
#findSDL2()

## !!! WARNING These are the defines that were defined regardless of an option.
## !!! Or the script couldn't match them. Match them accordingly, delete them or keep them

# Setting the include directory for the application to find config.h
include_directories( ${CMAKE_BINARY_DIR} )
list(APPEND CMAKE_PREFIX_PATH "~/Qt/6.3.0/gcc_64")
# Since we have created a config.h add a global define for it
add_definitions( "-DHAVE_CONFIG_H" )
add_subdirectory( src )
add_subdirectory( doc )
